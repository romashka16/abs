import whisper
import os

def transcribe_srt(wav_path: str, srt_output_path: str, model) -> None:
    print(f"üé§ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏: {wav_path}")
    
    # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å –ø–æ—Å–ª–æ–≤–Ω—ã–º–∏ —Ç–∞–π–º–∏–Ω–≥–∞–º–∏
    result = model.transcribe(
        wav_path, 
        language='ru',
        task='transcribe',
        verbose=True,
        word_timestamps=True,
        condition_on_previous_text=True,
        temperature=0.0  # –ë–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    )
    
    print("Whisper –æ–ø—Ä–µ–¥–µ–ª–∏–ª —è–∑—ã–∫ –∫–∞–∫:", result.get('language'))
    print(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {len(result['segments'])}")

    # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–µ SRT —Å—É–±—Ç–∏—Ç—Ä—ã (—Å–µ–≥–º–µ–Ω—Ç–Ω—ã–µ)
    segments = result['segments']
    with open(srt_output_path, 'w', encoding='utf-8') as f:
        for i, segment in enumerate(segments, start=1):
            start = segment['start']
            end = segment['end']
            text = segment['text'].strip()
            f.write(f"{i}\n")
            f.write(f"{format_timestamp(start)} --> {format_timestamp(end)}\n")
            f.write(f"{text}\n\n")

def transcribe_word_level(wav_path: str, output_path: str, model) -> dict:
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å –ø–æ—Å–ª–æ–≤–Ω—ã–º–∏ —Ç–∞–π–º–∏–Ω–≥–∞–º–∏ –¥–ª—è MFA-–ø–æ–¥–æ–±–Ω–æ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è"""
    print(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å–ª–æ–≤–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é: {wav_path}")
    
    result = model.transcribe(
        wav_path, 
        language='ru',
        task='transcribe',
        verbose=True,
        word_timestamps=True,
        condition_on_previous_text=True,
        temperature=0.0
    )
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–æ–≤–Ω—ã–µ —Ç–∞–π–º–∏–Ω–≥–∏
    word_timings = []
    for segment in result['segments']:
        if 'words' in segment:
            for word_info in segment['words']:
                word_timings.append({
                    'word': word_info['word'].strip(),
                    'start': word_info['start'],
                    'end': word_info['end']
                })
    
    print(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —Å–ª–æ–≤ —Å —Ç–∞–π–º–∏–Ω–≥–∞–º–∏: {len(word_timings)}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    import json
    with open(output_path, 'w', encoding='utf-8') as f:
        json.dump({
            'words': word_timings,
            'segments': result['segments'],
            'language': result.get('language', 'ru')
        }, f, ensure_ascii=False, indent=2)
    
    return {'words': word_timings, 'segments': result['segments']}

def create_word_level_ass(word_timings: list, ass_output_path: str) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ ASS —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —Å –ø–æ—Å–ª–æ–≤–Ω—ã–º–∏ —Ç–∞–π–º–∏–Ω–≥–∞–º–∏ (–Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–≥–æ, –∫–æ–Ω–µ—Ü —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç—Å—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è)"""
    print(f"üé® –°–æ–∑–¥–∞–µ–º ASS —Å—É–±—Ç–∏—Ç—Ä—ã —Å –ø–æ—Å–ª–æ–≤–Ω—ã–º–∏ —Ç–∞–π–º–∏–Ω–≥–∞–º–∏ (–Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–≥–æ, –∫–æ–Ω–µ—Ü —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç—Å—è)")
    
    import pysubs2
    
    subs = pysubs2.SSAFile()
    
    # –°—Ç–∏–ª—å: –∂–µ–ª—Ç—ã–π, –∫—Ä—É–≥–ª—ã–π, —Å —Ç–µ–Ω—å—é
    style = pysubs2.SSAStyle()
    style.fontname = "Comic Sans MS"
    style.fontsize = 32
    style.primarycolor = pysubs2.Color(255, 255, 0)  # –ñ–µ–ª—Ç—ã–π
    style.outlinecolor = pysubs2.Color(0, 0, 0)      # –ß–µ—Ä–Ω–∞—è –æ–∫–∞–Ω—Ç–æ–≤–∫–∞
    style.backcolor = pysubs2.Color(0, 0, 0)
    style.bold = True
    style.shadow = 2
    style.outline = 1
    style.alignment = 2  # –ü–æ —Ü–µ–Ω—Ç—Ä—É
    subs.styles["MainStyle"] = style

    # –≠—Ñ—Ñ–µ–∫—Ç: –±—ã—Å—Ç—Ä–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –∏–∑ —Ü–µ–Ω—Ç—Ä–∞
    effect = "\\fad(120,0)\\fscx120\\fscy120\\t(0,120,\\fscx100\\fscy100)"

    min_duration = 0.35  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª–æ–≤–∞ (—Å–µ–∫)
    n = len(word_timings)
    for i, word_info in enumerate(word_timings):
        word = word_info['word']
        if not word or word in ['<s>', '</s>', '[BLANK_AUDIO]']:
            continue
        start = word_info['start']
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–µ—Ü: –ª–∏–±–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π, –ª–∏–±–æ –¥–æ —Å—Ç–∞—Ä—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞
        if i < n - 1:
            next_start = word_timings[i+1]['start']
            end = min(word_info['end'], next_start)
            # –ù–æ –Ω–µ –∫–æ—Ä–æ—á–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if end - start < min_duration:
                end = min(start + min_duration, next_start)
        else:
            end = word_info['end']
            if end - start < min_duration:
                end = start + min_duration
        text = f"{{\\an5{effect}}}{word}"
        event = pysubs2.SSAEvent(
            start=int(start * 1000),
            end=int(end * 1000),
            text=text,
            style="MainStyle"
        )
        subs.append(event)

    subs.save(ass_output_path)
    print(f"‚úÖ ASS —Ñ–∞–π–ª —Å –ø–æ—Å–ª–æ–≤–Ω—ã–º–∏ —Ç–∞–π–º–∏–Ω–≥–∞–º–∏ —Å–æ–∑–¥–∞–Ω: {ass_output_path}")
    print(f"üé® –ù–∞—á–∞–ª–æ —Å–ª–æ–≤–∞ —Å—Ç—Ä–æ–≥–æ –ø–æ Whisper, –∫–æ–Ω–µ—Ü —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç—Å—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è")

def format_timestamp(seconds: float) -> str:
    h = int(seconds // 3600)
    m = int((seconds % 3600) // 60)
    s = int(seconds % 60)
    ms = int((seconds - int(seconds)) * 1000)
    return f"{h:02}:{m:02}:{s:02},{ms:03}"
