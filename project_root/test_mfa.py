#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ MFA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from config import USE_MFA_ALIGNMENT, MFA_FALLBACK_TO_NORMAL
from mfa_align import process_with_mfa, clean_mfa_corpus
from paths import MFA_CORPUS_TXTS, MFA_CORPUS_WAVS, MFA_OUTPUT, RUSSIAN_DICT, RUSSIAN_MFA_MODEL_DIR

def test_mfa_installation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ MFA"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É MFA...")
    
    try:
        import subprocess
        result = subprocess.run(["mfa", "--version"], capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print(f"‚úÖ MFA —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout.strip()}")
            return True
        else:
            print(f"‚ùå MFA –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {result.stderr}")
            return False
    except FileNotFoundError:
        print("‚ùå MFA –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install montreal-forced-aligner")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ MFA: {e}")
        return False

def test_mfa_paths():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π MFA"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç–∏ MFA...")
    
    paths_to_check = [
        ("RUSSIAN_DICT", RUSSIAN_DICT),
        ("RUSSIAN_MFA_MODEL_DIR", RUSSIAN_MFA_MODEL_DIR),
        ("MFA_CORPUS_TXTS", MFA_CORPUS_TXTS),
        ("MFA_CORPUS_WAVS", MFA_CORPUS_WAVS),
        ("MFA_OUTPUT", MFA_OUTPUT)
    ]
    
    all_good = True
    for name, path in paths_to_check:
        if path.exists():
            print(f"‚úÖ {name}: {path}")
        else:
            print(f"‚ùå {name}: {path} (–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
            all_good = False
    
    return all_good

def test_mfa_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    
    dependencies = [
        ("TextGrid", "TextGrid"),
        ("pysubs2", "pysubs2"),
        ("subprocess", "subprocess"),
        ("pathlib", "pathlib")
    ]
    
    all_good = True
    for name, module in dependencies:
        try:
            __import__(module)
            print(f"‚úÖ {name}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            print(f"‚ùå {name}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            all_good = False
    
    return all_good

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MFA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print(f"‚öôÔ∏è USE_MFA_ALIGNMENT: {USE_MFA_ALIGNMENT}")
    print(f"‚öôÔ∏è MFA_FALLBACK_TO_NORMAL: {MFA_FALLBACK_TO_NORMAL}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
    mfa_installed = test_mfa_installation()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    deps_ok = test_mfa_dependencies()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É—Ç–∏
    paths_ok = test_mfa_paths()
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"üîß MFA —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {'‚úÖ' if mfa_installed else '‚ùå'}")
    print(f"üì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {'‚úÖ' if deps_ok else '‚ùå'}")
    print(f"üìÅ –ü—É—Ç–∏: {'‚úÖ' if paths_ok else '‚ùå'}")
    
    if mfa_installed and deps_ok and paths_ok:
        print("\nüéâ MFA –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ main.py –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ —Å MFA")
    else:
        print("\n‚ö†Ô∏è MFA –Ω–µ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –≤—ã—à–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    if paths_ok:
        print("\nüßπ –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        clean_mfa_corpus()

if __name__ == "__main__":
    main() 