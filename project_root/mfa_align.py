import subprocess
import os
import shutil
from pathlib import Path
import pysubs2
from paths import MFA_CORPUS_TXTS, MFA_CORPUS_WAVS, MFA_OUTPUT, RUSSIAN_DICT, RUSSIAN_MFA_MODEL_DIR
from config import CLEAN_MFA_CORPUS, MFA_TIMEOUT

USE_WORD_LEVEL_WHISPER = True  # ‚úÖ –í–∫–ª—é—á–µ–Ω–æ
USE_MFA_ALIGNMENT = False      # ‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ

def check_mfa_available():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ MFA"""
    try:
        import subprocess
        result = subprocess.run(["mfa", "--version"], capture_output=True, text=True, timeout=10)
        return result.returncode == 0
    except:
        return False

def clean_mfa_corpus():
    """–û—á–∏—Å—Ç–∫–∞ MFA –∫–æ—Ä–ø—É—Å–∞"""
    print("üßπ –û—á–∏—â–∞–µ–º MFA –∫–æ—Ä–ø—É—Å...")
    try:
        if MFA_CORPUS_TXTS.exists():
            shutil.rmtree(MFA_CORPUS_TXTS)
        if MFA_CORPUS_WAVS.exists():
            shutil.rmtree(MFA_CORPUS_WAVS)
        if MFA_OUTPUT.exists():
            shutil.rmtree(MFA_OUTPUT)
        print("‚úÖ MFA –∫–æ—Ä–ø—É—Å –æ—á–∏—â–µ–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–ø—É—Å–∞: {e}")

def prepare_mfa_corpus(audio_path: str, srt_path: str, video_name: str):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ—Ä–ø—É—Å–∞ –¥–ª—è MFA"""
    print(f"üìÅ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä–ø—É—Å MFA –¥–ª—è {video_name}")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    MFA_CORPUS_TXTS.mkdir(parents=True, exist_ok=True)
    MFA_CORPUS_WAVS.mkdir(parents=True, exist_ok=True)
    MFA_OUTPUT.mkdir(parents=True, exist_ok=True)
    
    # –ö–æ–ø–∏—Ä—É–µ–º –∞—É–¥–∏–æ
    wav_dest = MFA_CORPUS_WAVS / f"{video_name}.wav"
    subprocess.run(["copy", str(audio_path), str(wav_dest)], shell=True, check=True)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏–∑ SRT
    txt_dest = MFA_CORPUS_TXTS / f"{video_name}.txt"
    with open(srt_path, 'r', encoding='utf-8') as srt_file:
        lines = srt_file.readlines()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏–∑ SRT
    text_lines = []
    for line in lines:
        line = line.strip()
        if line and not line.isdigit() and '-->' not in line:
            text_lines.append(line)
    
    with open(txt_dest, 'w', encoding='utf-8') as txt_file:
        txt_file.write(' '.join(text_lines))
    
    print(f"‚úÖ –ö–æ—Ä–ø—É—Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω: {txt_dest}")

def run_mfa_alignment():
    """–ó–∞–ø—É—Å–∫ MFA –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è"""
    print("üéØ –ó–∞–ø—É—Å–∫–∞–µ–º MFA –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ...")
    
    if not check_mfa_available():
        print("‚ùå MFA –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("üí° –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ MFA –Ω–∞ Windows:")
        print("   1. –°–∫–∞—á–∞–π—Ç–µ —Ä–µ–ª–∏–∑ —Å GitHub: https://github.com/MontrealCorpusTools/Montreal-Forced-Aligner/releases")
        print("   2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ conda: conda install -c conda-forge montreal-forced-aligner")
        return False
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        subprocess.run([
            "mfa", "align",
            str(MFA_CORPUS_WAVS),
            str(RUSSIAN_DICT),
            str(RUSSIAN_MFA_MODEL_DIR),
            str(MFA_OUTPUT),
            "--clean", "--verbose"
        ], check=True, timeout=MFA_TIMEOUT)
        print("‚úÖ MFA –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ MFA: {e}")
        return False
    except subprocess.TimeoutExpired:
        print(f"‚ùå MFA –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è ({MFA_TIMEOUT} —Å–µ–∫)")
        return False
    except FileNotFoundError:
        print("‚ùå MFA –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install montreal-forced-aligner")
        return False

def parse_textgrid_to_ass(textgrid_path, ass_path):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è TextGrid –≤ ASS —Å—É–±—Ç–∏—Ç—Ä—ã"""
    print(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º TextGrid –≤ ASS: {textgrid_path}")
    
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∏–º–ø–æ—Ä—Ç–∞ TextGrid
        try:
            from praatio import tgio as textgrid
            tg = textgrid.openTextGrid(textgrid_path)
        except ImportError:
            try:
                from textgrid import TextGrid
                tg = TextGrid.fromFile(textgrid_path)
            except ImportError:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å TextGrid. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install praatio")
                return False
        
        word_tier = next((tier for tier in tg.tiers if tier.name.lower() in ["word", "words"]), None)
        
        if not word_tier:
            print("‚ùå –ù–µ—Ç —Å–ª–æ—è 'word' –≤ TextGrid.")
            return False

        subs = pysubs2.SSAFile()
        style = pysubs2.SSAStyle()
        style.fontname = "Anton"
        style.fontsize = 28
        style.primarycolor = pysubs2.Color(255, 128, 0)  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        style.outlinecolor = pysubs2.Color(0, 0, 0)      # –ß–µ—Ä–Ω—ã–π
        style.bold = True
        style.shadow = 0
        style.outline = 1
        style.alignment = 2  # –ü–æ —Ü–µ–Ω—Ç—Ä—É (2 = center)
        subs.styles["TikTokStyle"] = style

        for interval in word_tier.intervals:
            word = interval.mark.strip()
            if not word:
                continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
            start = max(interval.minTime - 0.2, 0)
            end = interval.maxTime + 0.1

            text = f"{{\\an5}}{word}"
            event = pysubs2.SSAEvent(
                start=int(start * 1000),
                end=int(end * 1000),
                text=text,
                style="TikTokStyle"
            )
            subs.append(event)

        subs.save(ass_path)
        print(f"‚úÖ ASS —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {ass_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ TextGrid: {e}")
        return False

def process_with_mfa(audio_path: str, srt_path: str, video_name: str, output_ass_path: str):
    """–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å MFA –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º MFA –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è {video_name}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å MFA
    if not check_mfa_available():
        print("‚ùå MFA –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("üí° –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è MFA:")
        print("   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MFA: pip install montreal-forced-aligner")
        print("   2. –ò–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ —Ä–µ–ª–∏–∑ —Å GitHub")
        print("   3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ conda: conda install -c conda-forge montreal-forced-aligner")
        return False
    
    try:
        # 1. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä–ø—É—Å
        prepare_mfa_corpus(audio_path, srt_path, video_name)
        
        # 2. –ó–∞–ø—É—Å–∫–∞–µ–º MFA
        if not run_mfa_alignment():
            print("‚ö†Ô∏è MFA –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã")
            return False
        
        # 3. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        textgrid_path = MFA_OUTPUT / f"{video_name}.TextGrid"
        if textgrid_path.exists():
            if parse_textgrid_to_ass(str(textgrid_path), output_ass_path):
                # –û—á–∏—â–∞–µ–º –∫–æ—Ä–ø—É—Å –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                if CLEAN_MFA_CORPUS:
                    clean_mfa_corpus()
                return True
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ TextGrid")
                return False
        else:
            print(f"‚ùå TextGrid —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {textgrid_path}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ MFA –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}")
        return False
