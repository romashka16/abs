#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ MFA
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from config import USE_MFA_ALIGNMENT, MFA_FALLBACK_TO_NORMAL, USE_WORD_LEVEL_WHISPER
from paths import TOP_FOLDER, BOTTOM_FOLDER, AUDIO_FOLDER, SUBTITLED_FOLDER, STACKED_FOLDER, BASE_FOLDER

def test_system_configuration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 50)
    
    print(f"‚öôÔ∏è USE_MFA_ALIGNMENT: {USE_MFA_ALIGNMENT}")
    print(f"‚öôÔ∏è USE_WORD_LEVEL_WHISPER: {USE_WORD_LEVEL_WHISPER}")
    print(f"‚öôÔ∏è MFA_FALLBACK_TO_NORMAL: {MFA_FALLBACK_TO_NORMAL}")
    
    if USE_MFA_ALIGNMENT:
        print("üéØ MFA –≤–∫–ª—é—á–µ–Ω - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è")
    elif USE_WORD_LEVEL_WHISPER:
        print("üéØ –ü–æ—Å–ª–æ–≤–Ω—ã–µ —Ç–∞–π–º–∏–Ω–≥–∏ Whisper –≤–∫–ª—é—á–µ–Ω—ã - –æ—Ç–ª–∏—á–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ MFA!")
        print("   ‚úÖ –î–∞–µ—Ç –ø–æ—Å–ª–æ–≤–Ω—ã–µ —Ç–∞–π–º–∏–Ω–≥–∏ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("   ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ –Ω–∞ Windows")
        print("   ‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –±–ª–∏–∑–∫–æ –∫ MFA")
    else:
        print("üìù –û–±—ã—á–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã - –±–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º")

def test_paths():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π")
    print("=" * 50)
    
    paths_to_check = [
        ("BASE_FOLDER", BASE_FOLDER),
        ("TOP_FOLDER", TOP_FOLDER),
        ("BOTTOM_FOLDER", BOTTOM_FOLDER),
        ("AUDIO_FOLDER", AUDIO_FOLDER),
        ("SUBTITLED_FOLDER", SUBTITLED_FOLDER),
        ("STACKED_FOLDER", STACKED_FOLDER)
    ]
    
    all_good = True
    for name, path in paths_to_check:
        if os.path.exists(path):
            print(f"‚úÖ {name}: {path}")
        else:
            print(f"‚ùå {name}: {path} (–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
            all_good = False
    
    return all_good

def test_video_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤"""
    print("\nüé¨ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Ö–Ω–∏–µ –≤–∏–¥–µ–æ
    if os.path.exists(TOP_FOLDER):
        top_videos = [f for f in os.listdir(TOP_FOLDER) if f.lower().endswith(('.mp4', '.mkv'))]
        if top_videos:
            print(f"‚úÖ –í–µ—Ä—Ö–Ω–∏–µ –≤–∏–¥–µ–æ –Ω–∞–π–¥–µ–Ω—ã: {len(top_videos)} —Ñ–∞–π–ª–æ–≤")
            for video in top_videos[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   üìπ {video}")
            if len(top_videos) > 3:
                print(f"   ... –∏ –µ—â–µ {len(top_videos) - 3} —Ñ–∞–π–ª–æ–≤")
        else:
            print("‚ùå –í –ø–∞–ø–∫–µ top_clips –Ω–µ—Ç –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤")
    else:
        print("‚ùå –ü–∞–ø–∫–∞ top_clips –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏–∂–Ω–∏–µ –≤–∏–¥–µ–æ
    if os.path.exists(BOTTOM_FOLDER):
        bottom_videos = [f for f in os.listdir(BOTTOM_FOLDER) if f.lower().endswith(('.mp4', '.mkv'))]
        if bottom_videos:
            print(f"‚úÖ –ù–∏–∂–Ω–∏–µ –≤–∏–¥–µ–æ –Ω–∞–π–¥–µ–Ω—ã: {len(bottom_videos)} —Ñ–∞–π–ª–æ–≤")
            for video in bottom_videos[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   üìπ {video}")
            if len(bottom_videos) > 3:
                print(f"   ... –∏ –µ—â–µ {len(bottom_videos) - 3} —Ñ–∞–π–ª–æ–≤")
        else:
            print("‚ùå –í –ø–∞–ø–∫–µ bottom_clips –Ω–µ—Ç –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤")
    else:
        print("‚ùå –ü–∞–ø–∫–∞ bottom_clips –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

def test_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    print("=" * 50)
    
    dependencies = [
        ("whisper", "openai-whisper"),
        ("ffmpeg-python", "ffmpeg-python"),
        ("pysubs2", "pysubs2"),
        ("numpy", "numpy"),
        ("pathlib", "pathlib")
    ]
    
    all_good = True
    for name, module in dependencies:
        try:
            __import__(name)
            print(f"‚úÖ {name}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            print(f"‚ùå {name}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            all_good = False
    
    return all_good

def test_ffmpeg():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ ffmpeg"""
    print("\nüé¨ –ü—Ä–æ–≤–µ—Ä–∫–∞ ffmpeg")
    print("=" * 50)
    
    try:
        import subprocess
        result = subprocess.run(["ffmpeg", "-version"], capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print("‚úÖ ffmpeg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print("‚ùå ffmpeg –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
    except FileNotFoundError:
        print("‚ùå ffmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ffmpeg:")
        print("   - –°–∫–∞—á–∞–π—Ç–µ —Å https://ffmpeg.org/download.html")
        print("   - –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: winget install ffmpeg")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ffmpeg: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    test_system_configuration()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    deps_ok = test_dependencies()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º ffmpeg
    ffmpeg_ok = test_ffmpeg()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É—Ç–∏
    paths_ok = test_paths()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã
    test_video_files()
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"üì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {'‚úÖ' if deps_ok else '‚ùå'}")
    print(f"üé¨ ffmpeg: {'‚úÖ' if ffmpeg_ok else '‚ùå'}")
    print(f"üìÅ –ü—É—Ç–∏: {'‚úÖ' if paths_ok else '‚ùå'}")
    
    if deps_ok and ffmpeg_ok and paths_ok:
        print("\nüéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ main.py –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ")
        
        if USE_WORD_LEVEL_WHISPER:
            print("üéØ –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–æ–≤–Ω—ã–µ —Ç–∞–π–º–∏–Ω–≥–∏ Whisper!")
            print("   –≠—Ç–æ –¥–∞—Å—Ç –≤–∞–º —Ç–æ—á–Ω—ã–µ —Ç–∞–π–º–∏–Ω–≥–∏ –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ –±–µ–∑ MFA!")
        elif USE_MFA_ALIGNMENT:
            print("üéØ –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MFA (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)")
        else:
            print("üìù –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã")
    else:
        print("\n‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –≤—ã—à–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç")
    
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    if not ffmpeg_ok:
        print("   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ffmpeg –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ")
    if USE_MFA_ALIGNMENT:
        print("   2. –î–ª—è MFA: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ conda –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ conda install -c conda-forge montreal-forced-aligner")
    if not USE_WORD_LEVEL_WHISPER:
        print("   3. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∫–ª—é—á–∏—Ç—å USE_WORD_LEVEL_WHISPER = True –¥–ª—è –ø–æ—Å–ª–æ–≤–Ω—ã—Ö —Ç–∞–π–º–∏–Ω–≥–æ–≤")

if __name__ == "__main__":
    main() 